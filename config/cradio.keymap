/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};
&sk {
  quick-release;
};

/ { 

  // combos {
  //     compatible = "zmk,combos";
  //     combo_esc {
  //         timeout-ms = <50>;
  //         key-positions = <0 1>;
  //         bindings = <&kp ESC>;
  //     };
      
  //      combo_tab {
  //         timeout-ms = <50>;
  //         key-positions = <10 11>;
  //         bindings = <&kp TAB>;
  //     };
      
  //         combo_ralt {
  //         timeout-ms = <50>;
  //         key-positions = <17 16>;
  //         bindings = <&kp RALT>;
  //     };
      
  //                 combo_lalt {
  //         timeout-ms = <50>;
  //         key-positions = <11 12>;
  //         bindings = <&kp LALT>;
  //     };
      
  //                        combo_lgui {
  //         timeout-ms = <50>;
  //         key-positions = <12 13>;
  //         bindings = <&kp LGUI>;
  //     };
      
      
  //        combo_rgui {
  //         timeout-ms = <50>;
  //         key-positions = <17 18>;
  //         bindings = <&kp RGUI>;
  //     };  
  // };

  behaviors {
    ZMK_MACRO(mac_slashes,
      wait-ms = <0>;
      tap-ms = <0>;
      bindings
      = <&macro_release &kp LSHFT>
      , <&macro_tap &kp BSLH>;)
    comma: comma_shifted {
      compatible = "zmk,behavior-mod-morph";
      label = "COMMA_SHIFTED";
      #binding-cells = <0>;
      bindings = <&kp CMMA>, <&kp CRRT>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    dot: dot_shifted {
      compatible = "zmk,behavior-mod-morph";
      label = "DOT_SHIFTED";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp TILDE>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    slash: slash_shifted {
      compatible = "zmk,behavior-mod-morph";
      label = "SLASH_SHIFTED";
      #binding-cells = <0>;
      bindings = <&kp FSLH>, <&mac_slashes>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };

  keymap {
    compatible = "zmk,keymap";
    default_layer {
      bindings = <
        &kp Q  &kp W  &kp E  &kp R  &kp T             &kp Y  &kp U  &kp I  &kp O  &kp QUOT 
        &kp A  &kp S  &kp D  &kp F  &kp G             &kp H  &kp J  &kp K  &kp L  &kp P
        &kp Z  &kp X  &kp C  &kp V  &kp B             &kp N  &kp M  &comma  &dot  &slash
                             &mo 1  &mo 3             &mo 2  &kp SPC  
      >;
    };

    nav_layer {
      bindings = <
        &kp CAPS  &kp RALT  &key_repeat  &caps_word  &reset     &kp PG_UP  &kp LG(LBKT)  &kp UP  &kp LG(RBKT)  &trans 
        &sk LCTL  &sk LALT  &sk LGUI  &sk LSFT  &trans          &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp ENTER
        &kp ESC  &kp TAB 	&kp ENTER  &kp SPC  &kp BKSP          &trans  &kp LG(LEFT)  &key_repeat  &kp LG(RIGHT)  &kp DEL 
                                        &trans  &trans          &mo 4  &kp BKSP
      >;
    };
      
    symbols_layer {
      bindings = <
        &kp PRCT  &kp DLLR  &kp HASH  &kp ATSN  &kp STAR        &kp TILDE  &kp MINUS &kp UNDER &kp GRAV &kp DQT
        &kp PIPE  &kp AMPS  &kp QMARK  &kp BANG  &kp PLUS       &kp COLON  &sk RSFT  &sk RGUI  &sk RALT  &kp SEMI
        &kp LT  &kp LBKT  &kp LPAR  &kp LBRC   &kp CRRT         &kp EQUAL  &kp RBRC  &kp RPAR  &kp RBKT  &kp GT
                                          &mo 3 &trans          &trans  &trans 
      >;
    };	
      
    number_layer {
      bindings = <
        &kp CAPS  &kp RALT  &key_repeat  &caps_word  &kp STAR       &kp MINUS  &kp N1  &kp N2  &kp N3  &kp CMMA
        &kp LCTL  &kp LALT  &kp LGUI  &kp LSFT  &kp PLUS            &kp FSLH  &kp N4  &kp N5  &kp N6  &kp ENTER 
        &kp ESC  &kp TAB 	&kp ENTER  &kp SPC  &kp BKSP              &kp EQUAL  &kp N7  &kp N8  &kp N9  &kp DOT   
                                        &trans  &trans              &kp N0 &kp BKSP
      >;
    };	

    media_layer {
      bindings = <
        &kp F1  &kp F2  &kp F3  &kp F4  &bt BT_NXT          &kp C_BRI_UP  &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &reset
        &kp F5  &kp F6  &kp F7  &kp F8  &bt BT_PRV          &kp C_BRI_DN  &kp LSFT  &kp LGUI  &kp LALT  &kp LCTL 
        &kp F9  &kp F10 	&kp F11  &kp F12  &bootloader     &trans  &kp C_PREV  &kp C_PP  &kp C_NEXT  &trans   
                                      &to 0  &trans         &trans &kp BKSP
      >;
    };	
          
  };
};
